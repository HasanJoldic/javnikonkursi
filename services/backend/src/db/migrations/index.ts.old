import fs from "fs";
import path from "path";
import { Client } from "pg";
import dotenv from "dotenv";

dotenv.config();

async function updateMigrationStatus(client: Client, filename: string) {
  let migrationsResult = await client.query(
    `
    SELECT id 
    FROM migrations
    WHERE filename = $1
  `,
    [filename]
  );
  let id = migrationsResult.rows[0] && migrationsResult.rows[0].id;
  if (!id) {
    migrationsResult = await client.query(
      `
      INSERT INTO migrations (filename)
      VALUES ($1)
      RETURNING id
    `,
      [filename]
    );
    id = migrationsResult.rows[0] && migrationsResult.rows[0].id;
  }

  await client.query(
    `
    INSERT INTO migration_history (migration_id)
    VALUES ($1)
  `,
    [id]
  );
}

function getFileContent(filename: string) {
  return fs.readFileSync(path.join(__dirname, filename)).toString();
}

const validArgs = ["--up", "--up-all", "--down", "--down-all"];

(async function main() {
  try {
    const arg = process.argv[2];
    if (!validArgs.includes(arg)) {
      console.error(
        `One of the following arguments needs to be provided: ${validArgs}`
      );
      process.exit(9);
    }

    const client = new Client();
    await client.connect();

    const sql = fs
      .readFileSync(path.join(__dirname, "../migrations/setup.sql"))
      .toString();
    await client.query(sql);

    const upMigrations = fs
      .readdirSync(path.join(__dirname, "../migrations/up"))
      .sort();

    const downMigrations = fs
      .readdirSync(path.join(__dirname, "../migrations/down"))
      .sort();

    const lastMigrationRes = await client.query(`
    SELECT 
      m.filename
    FROM migration_history AS s
    JOIN migrations AS m ON s.migration_id = m.id;
  `);
    const lastMigrationFilename =
      lastMigrationRes.rows[0] && lastMigrationRes.rows[0].filename;

    // console.log({ lastMigrationFilename, upMigrations, downMigrations });

    const remainingUpMigrations = upMigrations.slice(
      upMigrations.findIndex((o) => o === lastMigrationFilename)
    );
    const remainingDownMigrations = downMigrations.slice(
      0,
      downMigrations.findIndex((o) => o === lastMigrationFilename) + 1
    );

    // console.log({ remainingUpMigrations, remainingDownMigrations });

    switch (arg) {
      case "--up": {
        const filename = remainingUpMigrations[0];
        if (filename) {
          const sql = getFileContent(`../migrations/up/${filename}`);
          await client.query(sql);
          updateMigrationStatus(client, filename);
        }
        break;
      }

      case "--up-all": {
        for (const filename of remainingUpMigrations) {
          const sql = getFileContent(`../migrations/up/${filename}`);
          console.log({ filename, sql });
          await client.query(sql);
          updateMigrationStatus(client, filename);
        }
        break;
      }

      case "--down": {
        console.log("here");
        const filename = remainingDownMigrations.reverse()[0];
        if (filename) {
          const sql = getFileContent(`../migrations/down/${filename}`);
          await client.query(sql);
          updateMigrationStatus(client, filename);
        }
        break;
      }

      case "--down-all": {
        const downMigrationsReverse = downMigrations.reverse();
        for (const filename of downMigrationsReverse) {
          const sql = getFileContent(`../migrations/down/${filename}`);
          await client.query(sql);
          updateMigrationStatus(client, filename);
        }
        break;
      }
    }

    process.exit(1);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
})();
