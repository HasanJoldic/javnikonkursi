---
- hosts: all
  become: yes
  vars:
    server_name: "{{ ansible_host }}"
  tasks:
    - name: Add "node" user
      user:
        name: node

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        cache_valid_time: 86400

    - name: Install Nginx
      apt:
        name: nginx

    - name: Install node and npm
      shell:
        cmd: curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - && sudo apt-get install -y nodejs
        warn: false

    - name: Install yarn
      npm:
        name: yarn
        global: yes
        version: "1.22.5"

    - name: Install ACL # needed for git
      apt:
        name: acl

    - name: Git checkout
      git:
        repo: "https://github.com/HasanJoldic/javnikonkursi.com.git"
        dest: "{{ PROJECT_ROOT }}"
        version: "{{ GIT_BRANCH }}"
      become_user: node

    - name: Install node modules
      yarn:
        path: "{{ PROJECT_ROOT }}"
        production: "{{ 'yes' if ENV == 'production' else 'no' }}"
      become_user: node

    - name: Build packages
      shell:
        cmd: NODE_OPTIONS="--max-old-space-size=1024" yarn workspaces run build
        chdir: "{{ PROJECT_ROOT }}"
      become_user: node

    - name: Generate backend .env files
      template:
        src: templates/.env.backend.j2
        dest: "{{ PROJECT_ROOT }}/services/backend/.env"
      become_user: node

    - name: Generate frontend .env files
      template:
        src: templates/.env.frontend.j2
        dest: "{{ PROJECT_ROOT }}/services/frontend/.env"
      become_user: node

    # - name: Start backend server
    #   shell:
    #     cmd: yarn workspace @javnikonkursi/backend run start
    #     chdir: "{{ PROJECT_ROOT }}"
    #   become_user: node

    - name: Copy website files to the server's document root
      copy:
        src: "{{ PROJECT_ROOT }}/services/frontend/build"
        remote_src: yes
        dest: "{{ WEBSITE_PATH }}"
        mode: "644"
        owner: www-data

    - name: Apply Nginx template
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/default
      notify: Restart Nginx

    - name: Enable new site
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify: Restart Nginx

    - name: Allow all access to tcp port 80
      ufw:
        rule: allow
        port: "80"
        proto: tcp

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
