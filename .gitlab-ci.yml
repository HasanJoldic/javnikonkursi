stages:
  - publish
  - deploy
  
variables:
  API_TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-api:latest
  API_TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-api:$CI_COMMIT_SHORT_SHA
  FRONTEND_TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-frontend:$CI_COMMIT_SHORT_SHA
  FRONTEND_TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-frontend:$CI_COMMIT_SHORT_SHA

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  script:
    - echo "NODE_ENV"=$NODE_ENV >> "services/backend/.env"
    - echo "POSTGRES_HOST"=$POSTGRES_HOST >> "services/backend/.env"
    - echo "POSTGRES_PORT"=$POSTGRES_PORT >> "services/backend/.env"
    - echo "POSTGRES_USER"=$POSTGRES_USER >> "services/backend/.env"
    - echo "POSTGRES_PASSWORD"=$POSTGRES_PASSWORD >> "services/backend/.env"
    - echo "POSTGRES_DB"=$POSTGRES_DB >> "services/backend/.env"
    - echo "JWT_SECRET"=$JWT_SECRET >> "services/backend/.env"
    - echo "AWS_ACCESS_KEY_ID"=$AWS_ACCESS_KEY_ID >> "services/backend/.env"
    - echo "AWS_SECRET_ACCESS_KEY"=$AWS_SECRET_ACCESS_KEY >> "services/backend/.env"
    - echo "AWS_S3_BUCKET_NAME"=$AWS_S3_BUCKET_NAME >> "services/backend/.env"
    - echo "AWS_S3_PUBLIC_URL"=$AWS_S3_PUBLIC_URL >> "services/backend/.env"

    - echo "API_FULL_PATH"=$API_FULL_PATH >> "services/frontend/.env"
    
    - docker build --cache-from $API_TAG_LATEST -t $API_TAG_COMMIT -t $API_TAG_LATEST -f services/backend/Dockerfile  .
    - docker build --cache-from $FRONTEND_TAG_COMMIT -t $FRONTEND_TAG_COMMIT -t $FRONTEND_TAG_COMMIT -f services/frontend/Dockerfile  .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $API_TAG_COMMIT
    - docker push $API_TAG_LATEST
    - docker push $FRONTEND_TAG_COMMIT
    - docker push $FRONTEND_TAG_COMMIT

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"

    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $API_TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f javnikonkursi-api || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 3000:3000 --name javnikonkursi-api $API_TAG_COMMIT"

    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $FRONTEND_TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f javnikonkursi-frontend || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 8080:8080 --name javnikonkursi-frontend $FRONTEND_TAG_COMMIT"

    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -dp 80:80 --mount type=bind,source="$(pwd)"/nginx/templates,destination=/etc/nginx/templates --env SERVER_HOST=$SERVER_HOST --env SERVER_PORT=$SERVER_PORT --add-host=host.docker.internal:host-gateway --restart always nginx"
  environment:
    name: development
    url: 161.35.22.37
  only:
    - develop
