stages:
  - publish
  - deploy
  
variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  POSTGRES_HOST: $POSTGRES_HOST

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  script:
    - echo "NODE_ENV"=$NODE_ENV >> "services/backend/.env"
    - echo "POSTGRES_HOST"=$POSTGRES_HOST >> "services/backend/.env"
    - echo "POSTGRES_PORT"=$POSTGRES_PORT >> "services/backend/.env"
    - echo "POSTGRES_USER"=$POSTGRES_USER >> "services/backend/.env"
    - echo "POSTGRES_PASSWORD"=$POSTGRES_PASSWORD >> "services/backend/.env"
    - echo "POSTGRES_DB"=$POSTGRES_DB >> "services/backend/.env"

    - echo "JWT_SECRET"=$JWT_SECRET >> "services/backend/.env"

    - echo "AWS_ACCESS_KEY_ID"=$AWS_ACCESS_KEY_ID >> "services/backend/.env"
    - echo "AWS_SECRET_ACCESS_KEY"=$AWS_SECRET_ACCESS_KEY >> "services/backend/.env"
    - echo "AWS_S3_BUCKET_NAME"=$AWS_S3_BUCKET_NAME >> "services/backend/.env"
    - echo "AWS_S3_PUBLIC_URL"=$AWS_S3_PUBLIC_URL >> "services/backend/.env"
    
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -f services/backend/Dockerfile  .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f javnikonkursi || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 3000:3000 --name javnikonkursi $TAG_COMMIT"
  environment:
    name: development
    url: 161.35.22.37
  only:
    - develop
